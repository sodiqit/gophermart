// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/order/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/order/service.go -destination=./internal/server/order/service_mock.go -package=order
//

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	dtos "github.com/sodiqit/gophermart/internal/server/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockOrderService) GetUserOrders(ctx context.Context, userID int) ([]dtos.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]dtos.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderServiceMockRecorder) GetUserOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderService)(nil).GetUserOrders), ctx, userID)
}

// Upload mocks base method.
func (m *MockOrderService) Upload(ctx context.Context, userID int, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, userID, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockOrderServiceMockRecorder) Upload(ctx, userID, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockOrderService)(nil).Upload), ctx, userID, orderNumber)
}
