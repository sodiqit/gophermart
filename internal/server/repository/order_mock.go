// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/repository/order.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/repository/order.go -destination=./internal/server/repository/order_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	dtos "github.com/sodiqit/gophermart/internal/server/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, userID int, orderNumber, status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, orderNumber, status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, userID, orderNumber, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, userID, orderNumber, status)
}

// FindByOrderNumber mocks base method.
func (m *MockOrderRepository) FindByOrderNumber(ctx context.Context, orderNumber string) (dtos.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(dtos.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrderNumber indicates an expected call of FindByOrderNumber.
func (mr *MockOrderRepositoryMockRecorder) FindByOrderNumber(ctx, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderNumber", reflect.TypeOf((*MockOrderRepository)(nil).FindByOrderNumber), ctx, orderNumber)
}
